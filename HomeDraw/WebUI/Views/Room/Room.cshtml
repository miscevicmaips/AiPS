@model Domain.Entities.Room

<!DOCTYPE html>

<html>
<head>
    <script src="~/Scripts/jquery-3.3.1.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script src="~/Scripts/jquery-ui.js"></script>
    <script src="~/Scripts/two.js"></script>
    <script src="~/Scripts/bootstrap.js"></script>
    <link href="~/Content/room-page.css" rel="stylesheet" />
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <meta name="viewport" content="width=device-width" />
    <title>Room @Model.Name</title>
</head>
<body class="layoutBodySize">
    <nav class=" navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand">Room - @Model.Name</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarColor01" aria-controls="navbarColor01" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarColor01">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link" href="#" data-toggle="modal" data-target="#saveDrawingModal">Save Drawing</a>
                    @* @Html.ActionLink("Save Drawing", "Settings", "Home", null, new { @class = "nav-link" })*@
                </li>
                <li>
                    @Html.ActionLink("Exit Room", "PublicRooms", "Home", null, new { @class = "nav-link" })
                </li>
            </ul>
        </div>
    </nav>


    <div class="container-fluid h-100 p-0 m-0 d-flex flex-column">

        <!-- Drawing Surface -->
        <div id="drawingSurface" class="drawingSurface flex-grow-1 border border-primary">
        </div>
        <!-- Drawing Menu -->
        <div class="flex-grow-0">
            <div class="card card-body">
                <div class="form-row align-items-center text-center">
                    <div class="col">
                        <i>
                            <img class="toolsIcon" src="~/Content/icons/toolsIcon.png" />
                        </i>
                    </div>

                    <div class="col">
                        <i>
                            <img id="createBathButton" class="iconButton" src="~/Content/icons/bathIcon.png" />
                        </i>
                    </div>

                    <div class="col">
                        <i>
                            <img id="createLavatoryButton" class="iconButton" src="~/Content/icons/lavatoryIcon.png" />
                        </i>
                    </div>

                    <div class="col">
                        <i>
                            <img id="createShowerButton" class="iconButton" src="~/Content/icons/showerIcon.png" />
                        </i>
                    </div>

                    <div class="col">
                        <i>
                            <img id="createDoorButton" class="iconButton" src="~/Content/icons/doorIcon.png" />
                        </i>
                    </div>

                    <div class="col">
                        <i>
                            <img id="createWallButton" class="iconButton" src="~/Content/icons/wallIcon.png" />
                        </i>
                    </div>

                    <div class="col">
                        <i>
                            <img id="createWindowButton" class="iconButton" src="~/Content/icons/windowIcon.png" />
                        </i>
                    </div>

                    <div class="col">
                        <i>
                            <img id="createRefrigeratorButton" class="iconButton" src="~/Content/icons/refrigeratorIcon.png" />
                        </i>
                    </div>

                    <div class="col">
                        <i>
                            <img id="createSinkButton" class="iconButton" src="~/Content/icons/sinkIcon.png" />
                        </i>
                    </div>

                    <div class="col">
                        <i>
                            <img id="createStoveButton" class="iconButton" src="~/Content/icons/stoveIcon.png" />
                        </i>
                    </div>

                    <div class="col">
                        <i>
                            <img id="createSofaButton" class="iconButton" src="~/Content/icons/sofaIcon.png" />
                        </i>
                    </div>

                    <div class="col">
                        <i>
                            <img id="createTableButton" class="iconButton" src="~/Content/icons/tableIcon.png" />
                        </i>
                    </div>

                </div>
            </div>
        </div>

        <!-- Save Drawing Modal -->
        <div class="modal fade" id="saveDrawingModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h6 class="modal-title" id="saveDrawingModalLabel">Enter drawing name:</h6>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @Html.TextBoxFor(m => m.Password, new { @class = "form-control", @placeholder = "Enter drawing name", autocomplete = "off" })
                        <button type="button" class="btn btn-primary float-right mt-2">Save</button>
                    </div>

                </div>
            </div>
        </div>

    </div>


    <script>
        $(function () {

            var draw = $.connection.signalRHub;

            /* Callback to create an element! */
            draw.client.drawElementCallback = function (elementType, elementId) {

                var element = $('<div></div>', {
                    style: 'width: ' + 100 + 'px; height: ' + 100 + 'px; background-color:black;',
                    id: elementType + elementId
                });

                element.css("position", "absolute");

                $('#drawingSurface').append(element.draggable({
                    drag: function () {
                        var position = element.offset();
                        draw.server.moveElement(position.left, position.top, elementType + elementId);
                    }
                }));

                var elem = document.getElementById(elementType + elementId);
                var params = { width: 100, height: 100 };
                var two = new Two(params).appendTo(elem);

                if (elementType == 'bathElement') {
                    var circle = two.makeCircle(72, 100, 50);
                    circle.fill = 'orangered';
                    circle.stroke = 'orangered';
                    circle.linewidth = 5;
                    two.update();
                }

                if (elementType == 'lavatoryElement') {
                    var circle = two.makeCircle(72, 100, 50);
                    circle.fill = 'red';
                    circle.stroke = 'red';
                    circle.linewidth = 5;
                    two.update();
                }

                if (elementType == 'showerElement') {
                    var circle = two.makeCircle(72, 100, 50);
                    circle.fill = 'blue';
                    circle.stroke = 'blue';
                    circle.linewidth = 5;
                    two.update();
                }

                if (elementType == 'doorElement') {
                    var circle = two.makeCircle(72, 100, 50);
                    circle.fill = 'green';
                    circle.stroke = 'green';
                    circle.linewidth = 5;
                    two.update();
                }

                if (elementType == 'wallElement') {
                    var circle = two.makeCircle(72, 100, 50);
                    circle.fill = 'purple';
                    circle.stroke = 'purple';
                    circle.linewidth = 5;
                    two.update();
                }

                if (elementType == 'windowElement') {
                    var circle = two.makeCircle(72, 100, 50);
                    circle.fill = 'brown';
                    circle.stroke = 'brown';
                    circle.linewidth = 5;
                    two.update();
                }

                if (elementType == 'refrigeratorElement') {
                    var circle = two.makeCircle(72, 100, 50);
                    circle.fill = 'black';
                    circle.stroke = 'black';
                    circle.linewidth = 5;
                    two.update();
                }

                if (elementType == 'sinkElement') {
                    var circle = two.makeCircle(72, 100, 50);
                    circle.fill = 'yellow';
                    circle.stroke = 'yellow';
                    circle.linewidth = 5;
                    two.update();
                }

                if (elementType == 'stoveElement') {
                    var circle = two.makeCircle(72, 100, 50);
                    circle.fill = 'gray';
                    circle.stroke = 'gray';
                    circle.linewidth = 5;
                    two.update();
                }

                if (elementType == 'sofaElement') {
                    var circle = two.makeCircle(72, 100, 50);
                    circle.fill = 'cyan';
                    circle.stroke = 'cyan';
                    circle.linewidth = 5;
                    two.update();
                }

                if (elementType == 'tableElement') {
                    var circle = two.makeCircle(72, 100, 50);
                    circle.fill = 'violet';
                    circle.stroke = 'violet';
                    circle.linewidth = 5;
                    two.update();
                }
            };


            /* Callback to move an element! */
            draw.client.moveElementCallback = function (x, y, elementId) {
                $("#" + elementId).css({ left: x, top: y });
            };

            $.connection.hub.start().done(function () {
                $('#createBathButton').click(function () {
                    draw.server.drawElement('bathElement', @Model.ContainedDrawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createLavatoryButton').click(function () {
                    draw.server.drawElement('lavatoryElement', @Model.ContainedDrawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createShowerButton').click(function () {
                    draw.server.drawElement('showerElement', @Model.ContainedDrawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createDoorButton').click(function () {
                    draw.server.drawElement('doorElement', @Model.ContainedDrawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createWallButton').click(function () {
                    draw.server.drawElement('wallElement', @Model.ContainedDrawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createWindowButton').click(function () {
                    draw.server.drawElement('windowElement', @Model.ContainedDrawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createRefrigeratorButton').click(function () {
                    draw.server.drawElement('refrigeratorElement', @Model.ContainedDrawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createSinkButton').click(function () {
                    draw.server.drawElement('sinkElement', @Model.ContainedDrawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createStoveButton').click(function () {
                    draw.server.drawElement('stoveElement', @Model.ContainedDrawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createSofaButton').click(function () {
                    draw.server.drawElement('sofaElement', @Model.ContainedDrawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createTableButton').click(function () {
                    draw.server.drawElement('tableElement', @Model.ContainedDrawing.DrawingID);
                });
            });


        });
    </script>






























</body>
</html>



