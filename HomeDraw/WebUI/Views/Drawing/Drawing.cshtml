@model WebUI.Models.OpenDrawingViewModel
@using Microsoft.AspNet.Identity
<!DOCTYPE html>

<html>
<head>
    <script src="~/Scripts/jquery-3.3.1.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script src="~/Scripts/jquery-ui.js"></script>
    <script src="~/Scripts/two.js"></script>
    <script src="~/Scripts/drawingLibrary.js"></script>
    <script src="~/Scripts/bootstrap.js"></script>
    <link href="~/Content/room-page.css" rel="stylesheet" />
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css" integrity="sha384-oS3vJWv+0UjzBfQzYUhtDYW+Pj2yciDJxpsK1OYPAYjqT085Qq/1cq5FLXAZQ7Ay" crossorigin="anonymous">
    <meta name="viewport" content="width=device-width" />
    <title>Drawing @Model.Drawing.Name</title>
</head>

<body class="layoutBodySize">

    <div id="settingsButton" class="position-fixed settingsIcon"><i class="fas fa-cog"></i></div>

    <div id="drawingMenuButton" class="position-fixed drawingMenuIcon"><i class="fas fa-pencil-ruler"></i></div>

    <div id="lockedMenuButtonIcon" class="position-fixed drawingMenuIcon hidden"><i class="fas fa-lock"></i></div>


    <!-- Modal -->
    <div class="settingsMenu position-fixed hidden bg-dark" id="settingsMenuModal">
        <h3 class="mt-3 ml-3 text-white">Settings</h3>
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content border-0 text-center bg-dark mb-3 ">
                <h3 class="m-3">
                    @Html.ActionLink("Save Image", "SaveDrawing", "Drawing", null, new { @class = "text-white settingsMenuItem", @id = "settingsMenuLeaveRoomButton" })
                </h3>
                <h3 class="m-3">
                    @Html.ActionLink("Leave Room", "Dashboard", "Home", null, new { @class = "text-white settingsMenuItem", @id = "settingsMenuLeaveRoomButton" })
                </h3>
                <h3 id="settingsMenuCancelButton" class="m-3 text-white settingsMenuItem">Cancel</h3>
            </div>
        </div>
    </div>

    <div class="row h-100 p-0 m-0 d-flex flex-row">


        <!-- Drawing Surface -->
        <div id="drawingMenu" class="drawingMenu">
            <div class="h-100 bg-light d-flex flex-column justify-content-around position-fixed">
                <div class="row m-0 p-0">
                    <div class="col"><i><img id="createTableButton" class="iconButton" src="https://img.icons8.com/ultraviolet/40/000000/table.png" /></i></div>
                </div>

                <div class="row m-0 p-0">
                    <div class="col"><i><img id="createSofaButton" class="iconButton" src="https://img.icons8.com/ultraviolet/40/000000/living-room.png" /></i></div>
                </div>

                <div class="row m-0 p-0">
                    <div class="col"><i><img id="createStoveButton" class="iconButton" src="https://img.icons8.com/ultraviolet/40/000000/cooker.png" /></i></div>
                </div>

                <div class="row m-0 p-0">
                    <div class="col"><i><img id="createSinkButton" class="iconButton" src="https://img.icons8.com/doodle/48/000000/sink.png" /></i></div>
                </div>

                <div class="row m-0 p-0">
                    <div class="col"><i><img id="createRefrigeratorButton" class="iconButton" src="https://img.icons8.com/color/48/000000/fridge.png" /></i></div>
                </div>

                <div class="row m-0 p-0">
                    <div class="col"><i><img id="createWindowButton" class="iconButton" src="https://img.icons8.com/color/48/000000/closed-window.png" /></i></div>
                </div>

                <div class="row m-0 p-0">
                    <div class="col"><i><img id="createWallButton" class="iconButton" src="https://img.icons8.com/color/48/000000/brick-wall.png" /></i></div>
                </div>

                <div class="row m-0 p-0">
                    <div class="col"><i><img id="createDoorButton" class="iconButton" src="https://img.icons8.com/color/48/000000/door.png" /></i></div>
                </div>

                <div class="row m-0 p-0">
                    <div class="col"><i><img id="createShowerButton" class="iconButton" src="https://img.icons8.com/color/48/000000/shower.png" /></i></div>
                </div>

                <div class="row m-0 p-0">
                    <div class="col"><i><img id="createLavatoryButton" class="iconButton" src="https://img.icons8.com/color/48/000000/plumbing.png" /></i></div>
                </div>

                <div class="row m-0 p-0">
                    <div class="col"><i><img id="createBathButton" class="iconButton" src="https://img.icons8.com/color/48/000000/bath.png" /></i></div>
                </div>

                <div class="row m-0 p-0">
                    <div class="col"><i><img id="undoButton" class="iconButton" src="https://img.icons8.com/color/48/000000/undelete.png" /></i></div>
                </div>
            </div>
        </div>

        <div id="drawingSurface" class="drawingSurface flex-grow-1 pr-3">
        </div>


    </div>

    <script>
        var Drawing = function (elementsList) {
            this.elementsList = elementsList;
        }

        Drawing.prototype = {

            hydrate: function () {
                var memento = JSON.stringify(this);
                return memento;
            },

            dehydrate: function (memento) {
                var m = JSON.parse(memento);
                this.elementsList = m.elementsList;
            }
        }

        var CareTaker = function () {
            this.mementos = {};

            this.add = function (key, memento) {
                this.mementos[key] = memento;
            },

                this.get = function (key) {
                    return this.mementos[key];
                }
        }

        var elementsList = new Array();
        var drawing = new Drawing(elementsList);
        var caretaker = new CareTaker();

    </script>

    <script>
        var draw = $.connection.signalRHub;

        function reconstructDrawing(data) {
            data.forEach(function (item, index) {
                var elementType = "";

                if (item.DrawingObjectType === 0) {
                    elementType = 'bathElement';
                }

                if (item.DrawingObjectType === 1) {
                    elementType = 'lavatoryElement';
                }

                if (item.DrawingObjectType === 2) {
                    elementType = 'showerElement';
                }

                if (item.DrawingObjectType === 3) {
                    elementType = 'doorElement';
                }

                if (item.DrawingObjectType === 4) {
                    elementType = 'wallElement';
                }

                if (item.DrawingObjectType === 5) {
                    elementType = 'windowElement';
                }

                if (item.DrawingObjectType === 6) {
                    elementType = 'refrigeratorElement';
                }

                if (item.DrawingObjectType === 7) {
                    elementType = 'sinkElement';
                }

                if (item.DrawingObjectType === 8) {
                    elementType = 'stoveElement';
                }

                if (item.DrawingObjectType === 9) {
                    elementType = 'sofaElement';
                }

                if (item.DrawingObjectType === 10) {
                    elementType = 'tableElement';
                }

                reconstructDrawingObject(draw, elementType, item.DrawingObjectID, item.PositionTop, item.PositionLeft);
            });
        }

        $.ajax({
            url: '/Drawing/GetDrawingObjects',
            type: 'GET',
            dataType: 'json',
            data: { drawingId: @Model.Drawing.DrawingID },
            success: function (result) {
                reconstructDrawing(result);

                // create initial memento
                var jqueryElementsArrayJSON = result;
                var newElementsListJSON = new Array();

                $.each(jqueryElementsArrayJSON, function (index, item) {
                    var elementType = "";

                    if (item.DrawingObjectType === 0) {
                        elementType = 'bathElement';
                    }

                    if (item.DrawingObjectType === 1) {
                        elementType = 'lavatoryElement';
                    }

                    if (item.DrawingObjectType === 2) {
                        elementType = 'showerElement';
                    }

                    if (item.DrawingObjectType === 3) {
                        elementType = 'doorElement';
                    }

                    if (item.DrawingObjectType === 4) {
                        elementType = 'wallElement';
                    }

                    if (item.DrawingObjectType === 5) {
                        elementType = 'windowElement';
                    }

                    if (item.DrawingObjectType === 6) {
                        elementType = 'refrigeratorElement';
                    }

                    if (item.DrawingObjectType === 7) {
                        elementType = 'sinkElement';
                    }

                    if (item.DrawingObjectType === 8) {
                        elementType = 'stoveElement';
                    }

                    if (item.DrawingObjectType === 9) {
                        elementType = 'sofaElement';
                    }

                    if (item.DrawingObjectType === 10) {
                        elementType = 'tableElement';
                    }

                    var newElementFromArrayJSON = {
                        drawingElementType: elementType,
                        id: elementType + item.DrawingObjectID,
                        top: item.PositionTop,
                        left: item.PositionLeft
                    }

                    newElementsListJSON.push(newElementFromArrayJSON);
                })

                drawing.elementsList = newElementsListJSON;

                stateCounter = Object.keys(caretaker.mementos).length;
                caretaker.add(stateCounter, drawing.hydrate());
               
            },
            error: function (error) {
                console.log("Error handling AJAX request to GetDrawingObjects method.");
            }
        });
    </script>

    <script>
        $(document).ready(function () {
            $("#drawingMenuButton").click(function () {
                $("#drawingMenu").toggle("fast");
            });

            $("#settingsButton").click(function () {
                $("#settingsMenuModal").toggle("fast");
            });

            $("#settingsMenuCancelButton").click(function () {
                $("#settingsMenuModal").toggle("fast");
            });

            $(function () {

                var draw = $.connection.signalRHub;

                draw.client.createNewMementoCallback = function (elementType, elementId, positionTop, positionLeft) {

                    var jqueryElementsList = $("#drawingSurface").children();
                    var jqueryElementsArray = new Array();


                    $.each(jqueryElementsList, function (index, value) {
                        var newElementFromJquery = {
                            drawingElementType: $(this).attr('drawingelementtype'),
                            id: value.id,
                            top: value.offsetTop,
                            left: value.offsetLeft
                        }

                        jqueryElementsArray.push(newElementFromJquery);
                    })

                    drawing.elementsList = jqueryElementsArray;
                    stateCounter = Object.keys(caretaker.mementos).length;
                    caretaker.add(stateCounter, drawing.hydrate());

                }

                $('#undoButton').click(function () {
                    stateCounter = Object.keys(caretaker.mementos).length - 2;

                    if (stateCounter < 0) {
                        console.log("No UNDO actions available.");
                    } else {
                        drawing.dehydrate(caretaker.get(stateCounter));

                        $("#drawingSurface").empty();
                        var elements = drawing.elementsList;

                        $.each(elements, function (index, value) {
                            reconstructDrawingObject(draw, value.drawingElementType, value.id, value.top, value.left);
                        })
                    }
                });

            });
        });
    </script>


    <script>
        $(function () {

            var draw = $.connection.signalRHub;

            /* Callback to create an element! */
            draw.client.drawElementCallback = function (elementType, elementId) {

                createElement(draw, elementType, elementId);

                if (elementType == 'bathElement') {
                    drawBath(elementType, elementId);
                }

                if (elementType == 'lavatoryElement') {
                    drawLavatory(elementType, elementId);
                }

                if (elementType == 'showerElement') {
                    drawShower(elementType, elementId);
                }

                if (elementType == 'doorElement') {
                    drawDoor(elementType, elementId);
                }

                if (elementType == 'wallElement') {
                    // Missing implementation
                    drawWall(elementType, elementId);
                }

                if (elementType == 'windowElement') {
                    drawWindow(elementType, elementId);
                }

                if (elementType == 'refrigeratorElement') {
                    drawRefrigerator(elementType, elementId);
                }

                if (elementType == 'sinkElement') {
                    drawSink(elementType, elementId);
                }

                if (elementType == 'stoveElement') {
                    drawStove(elementType, elementId);
                }

                if (elementType == 'sofaElement') {
                    drawSofa(elementType, elementId);
                }

                if (elementType == 'tableElement') {
                    drawTable(elementType, elementId);
                }
            };

            // Set interface
            draw.client.setMasterInterface = function () {
                var drawingSurface = document.getElementById("drawingSurface");
                var drawingMenuButton = document.getElementById("drawingMenuButton");

                drawingSurface.classList.remove("pointerEvents");
                drawingMenuButton.classList.remove("hidden");
            };

            draw.client.setNormalInterface = function () {
               var drawingSurface = document.getElementById("drawingSurface");
                var drawingMenuButton = document.getElementById("drawingMenuButton");
                var lockedMenuButton = document.getElementById("lockedMenuButtonIcon");
                 $("#drawingMenu").hide();

                drawingSurface.classList.add("pointerEvents");
                drawingMenuButton.classList.add("hidden");
                lockedMenuButton.classList.remove("hidden");
            };

            draw.client.switchMaster = function (masterName, masterId) {
                var drawingSurface = document.getElementById("drawingSurface");
                var drawingMenuButton = document.getElementById("drawingMenuButton");
                var lockedMenuButton = document.getElementById("lockedMenuButtonIcon");


                if ('@User.Identity.GetUserId()' === masterId) {
                    drawingSurface.classList.remove("pointerEvents");
                    drawingMenuButton.classList.remove("hidden");
                    lockedMenuButton.classList.add("hidden");
                }

                if ('@User.Identity.GetUserId()' !== masterId) {
                    drawingSurface.classList.add("pointerEvents");
                    drawingMenuButton.classList.add("hidden");
                    lockedMenuButton.classList.remove("hidden");
                }
            };

            /* Callback to move an element! */
            draw.client.moveElementCallback = function (x, y, elementId) {
                $("#" + elementId).css({ left: x, top: y });
            };

            $.connection.hub.start().done(function () {
                $('#createBathButton').click(function () {
                    draw.server.drawElement('bathElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createLavatoryButton').click(function () {
                    draw.server.drawElement('lavatoryElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createShowerButton').click(function () {
                    draw.server.drawElement('showerElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createDoorButton').click(function () {
                    draw.server.drawElement('doorElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createWallButton').click(function () {
                    draw.server.drawElement('wallElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createWindowButton').click(function () {
                    draw.server.drawElement('windowElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createRefrigeratorButton').click(function () {
                    draw.server.drawElement('refrigeratorElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createSinkButton').click(function () {
                    draw.server.drawElement('sinkElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createStoveButton').click(function () {
                    draw.server.drawElement('stoveElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createSofaButton').click(function () {
                    draw.server.drawElement('sofaElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createTableButton').click(function () {
                    draw.server.drawElement('tableElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                draw.server.join(@Model.Drawing.DrawingID, '@User.Identity.GetUserId()');
                console.log("Joined group: " + @Model.Drawing.DrawingID);
            });

             $.connection.hub.start().done(function () {
                $('#leaveButton').click(function () {
                    draw.server.leave(@Model.Drawing.DrawingID, '@User.Identity.GetUserId()');
                console.log("Left group: " + @Model.Drawing.DrawingID);

                });
             });

        });
    </script>

</body>
</html>



