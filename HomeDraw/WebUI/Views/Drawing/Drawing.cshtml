@model WebUI.Models.OpenDrawingViewModel
@using Microsoft.AspNet.Identity
<!DOCTYPE html>

<html>
<head>
    <script src="~/Scripts/jquery-3.3.1.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script src="~/Scripts/jquery-ui.js"></script>
    <script src="~/Scripts/two.js"></script>
    <script src="~/Scripts/drawingLibrary.js"></script>
    <script src="~/Scripts/bootstrap.js"></script>
    <link href="~/Content/room-page.css" rel="stylesheet" />
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <meta name="viewport" content="width=device-width" />
    <title>Drawing @Model.Drawing.Name</title>
</head>
<body class="layoutBodySize">
    <nav class=" navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand">Drawing - @Model.Drawing.Name</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarColor01" aria-controls="navbarColor01" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarColor01">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link" href="#" data-toggle="modal" data-target="#saveDrawingModal">Save Drawing</a>
                    @* @Html.ActionLink("Save Drawing", "Settings", "Home", null, new { @class = "nav-link" })*@
                </li>
                <li>
                    @Html.ActionLink("Exit Drawing", "CloseDrawing", "Drawing", new { Model.Drawing.DrawingID }, new { @class = "nav-link" })
                </li>
            </ul>
        </div>
    </nav>


    <div class="container-fluid h-100 p-0 m-0 d-flex flex-column">

        <!-- Drawing Surface -->
        <div id="drawingSurface" class="drawingSurface flex-grow-1 border-top border-bottom border-dark">
        </div>
        <!-- Drawing Menu -->
        <div class="flex-grow-0">
            <div class="card card-body">
                <div id="masterInterfaceMenu" class="form-row align-items-center text-center d-none">

                    <div class="col"><i><img id="leaveButton" class="iconButton" src="~/Content/icons/undoIcon.png" /></i></div>

                    <div class="col"><i><img id="createBathButton" class="iconButton" src="~/Content/icons/bathIcon.png" /></i></div>

                    <div class="col"><i><img id="createLavatoryButton" class="iconButton" src="~/Content/icons/lavatoryIcon.png" /></i></div>

                    <div class="col"><i><img id="createShowerButton" class="iconButton" src="~/Content/icons/showerIcon.png" /></i></div>

                    <div class="col"><i><img id="createDoorButton" class="iconButton" src="~/Content/icons/doorIcon.png" /></i></div>

                    <div class="col"><i><img id="createWallButton" class="iconButton" src="~/Content/icons/wallIcon.png" /></i></div>

                    <div class="col"><i><img id="createWindowButton" class="iconButton" src="~/Content/icons/windowIcon.png" /></i></div>

                    <div class="col"><i><img id="createRefrigeratorButton" class="iconButton" src="~/Content/icons/refrigeratorIcon.png" /></i></div>

                    <div class="col"><i><img id="createSinkButton" class="iconButton" src="~/Content/icons/sinkIcon.png" /></i></div>

                    <div class="col"><i><img id="createStoveButton" class="iconButton" src="~/Content/icons/stoveIcon.png" /></i></div>

                    <div class="col"><i><img id="createSofaButton" class="iconButton" src="~/Content/icons/sofaIcon.png" /></i></div>

                    <div class="col"><i><img id="createTableButton" class="iconButton" src="~/Content/icons/tableIcon.png" /></i></div>

                </div>

                <div id="normalInterfaceMenu" class="form-row align-items-center text-center d-none">
                    <div class="col"><i><text id="currentMasterText" style="font-weight:900;">You are currently not the master. Please wait for your turn to draw.</text></i></div>
                </div>
            </div>
        </div>

        <!-- Save Drawing Modal -->
        <div class="modal fade" id="saveDrawingModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h6 class="modal-title" id="saveDrawingModalLabel">Enter drawing name:</h6>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @Html.TextBoxFor(m => m.SavedDrawingName, new { @class = "form-control", @placeholder = "Enter drawing name", autocomplete = "off" })
                        <button type="button" class="btn btn-primary float-right mt-2">Save</button>
                    </div>

                </div>
            </div>
        </div>

    </div>

    <script>
        var draw = $.connection.signalRHub;

        function reconstructDrawing(data) {
            data.forEach(function (item, index) {
                var elementType = "";

                if (item.DrawingObjectType === 0) {
                    elementType = 'bathElement';
                }

                if (item.DrawingObjectType === 1) {
                    elementType = 'lavatoryElement';
                }

                if (item.DrawingObjectType === 2) {
                    elementType = 'showerElement';
                }

                if (item.DrawingObjectType === 3) {
                    elementType = 'doorElement';
                }

                if (item.DrawingObjectType === 4) {
                    elementType = 'wallElement';
                }

                if (item.DrawingObjectType === 5) {
                    elementType = 'windowElement';
                }

                if (item.DrawingObjectType === 6) {
                    elementType = 'refrigeratorElement';
                }

                if (item.DrawingObjectType === 7) {
                    elementType = 'sinkElement';
                }

                if (item.DrawingObjectType === 8) {
                    elementType = 'stoveElement';
                }

                if (item.DrawingObjectType === 9) {
                    elementType = 'sofaElement';
                }

                if (item.DrawingObjectType === 10) {
                    elementType = 'tableElement';
                }

                reconstructDrawingObject(draw, elementType, item.DrawingObjectID, item.PositionTop, item.PositionLeft);
            });
        }

        $.ajax({
            url: '/Drawing/GetDrawingObjects',
            type: 'GET',
            dataType: 'json',
            data: { drawingId: @Model.Drawing.DrawingID },
            success: function (result) {
                reconstructDrawing(result);
            },
            error: function (error) {
                console.log("Error handling AJAX request to GetDrawingObjects method.");
            }
        });
    </script>


    <script>
        var Originator = function (elementsList) {
            this.elementsList = elementsList;
        }

        Originator.prototype = {
            hydrate: function () {
                var memento = this;
                return memento;
            },

            dehydrate: function (memento) {
                var m = memento;
                this.elementsList = m.elementsList;
            }
        }

        var CareTaker = function () {
            this.mementos = {};

            this.add = function (key, memento) {
                this.mementos[key] = memento;
            },

                this.get = function (key) {
                return this.mementos[key];
                }
        }

        var stateCounter = 0;
        var eleList = {};
        var originator = new Originator(eleList);
        var caretaker = new CareTaker();

        caretaker.add(stateCounter, originator.hydrate());

        $(function () {

            var draw = $.connection.signalRHub;

            /* Callback to create an element! */
            draw.client.drawElementCallback = function (elementType, elementId) {

                createElement(draw, elementType, elementId);

                if (elementType == 'bathElement') {
                    drawBath(elementType, elementId);
                }

                if (elementType == 'lavatoryElement') {
                    drawLavatory(elementType, elementId);
                }

                if (elementType == 'showerElement') {
                    drawShower(elementType, elementId);
                }

                if (elementType == 'doorElement') {
                    drawDoor(elementType, elementId);
                }

                if (elementType == 'wallElement') {
                    // Missing implementation
                    drawWall(elementType, elementId);
                }

                if (elementType == 'windowElement') {
                    drawWindow(elementType, elementId);
                }

                if (elementType == 'refrigeratorElement') {
                    drawRefrigerator(elementType, elementId);
                }

                if (elementType == 'sinkElement') {
                    drawSink(elementType, elementId);
                }

                if (elementType == 'stoveElement') {
                    drawStove(elementType, elementId);
                }

                if (elementType == 'sofaElement') {
                    drawSofa(elementType, elementId);
                }

                if (elementType == 'tableElement') {
                    drawTable(elementType, elementId);
                }

                var listOfElements = $("#drawingSurface").children();

                var originator = new Originator(listOfElements);

                stateCounter++;
                caretaker.add(stateCounter, originator.hydrate());

            };

            // Set interface
            draw.client.setMasterInterface = function () {
                var masterInterfaceMenu = document.getElementById("masterInterfaceMenu");
                var normalInterfaceMenu = document.getElementById("normalInterfaceMenu");
                var drawingSurface = document.getElementById("drawingSurface");

                masterInterfaceMenu.classList.remove("d-none");
                normalInterfaceMenu.classList.add("d-none");
                drawingSurface.classList.remove("pointerEvents");
            };

            draw.client.setNormalInterface = function () {
                var normalInterfaceMenu = document.getElementById("normalInterfaceMenu");
                var masterInterfaceMenu = document.getElementById("masterInterfaceMenu");
                var drawingSurface = document.getElementById("drawingSurface");

                normalInterfaceMenu.classList.remove("d-none");
                masterInterfaceMenu.classList.add("d-none");
                drawingSurface.classList.add("pointerEvents");
            };

            draw.client.switchMaster = function (masterName, masterId) {
                var masterInterfaceMenu = document.getElementById("masterInterfaceMenu");
                var normalInterfaceMenu = document.getElementById("normalInterfaceMenu");
                var drawingSurface = document.getElementById("drawingSurface");

                if ('@User.Identity.GetUserId()' === masterId) {
                    masterInterfaceMenu.classList.remove("d-none");
                    normalInterfaceMenu.classList.add("d-none");
                    drawingSurface.classList.remove("pointerEvents");
                }

                if ('@User.Identity.GetUserId()' !== masterId) {
                    normalInterfaceMenu.classList.remove("d-none");
                    masterInterfaceMenu.classList.add("d-none");
                    drawingSurface.classList.add("pointerEvents");
                }
            };


            $('#undoButton').click(function () {

                if (stateCounter == 0) {
                    originator.dehydrate(caretaker.get(stateCounter));
                    stateCounter = 0;
                }

                var drawingSurface = $("#drawingSurface");

                drawingSurface.empty();

                if (stateCounter > 0) {
                    stateCounter--;

                    originator.dehydrate(caretaker.get(stateCounter));
                    var elements = originator.elementsList;

                    $.each(elements, function (index, value) {
                        drawingSurface.append(value);
                    })
                }

            });

            /* Callback to move an element! */
            draw.client.moveElementCallback = function (x, y, elementId) {
                $("#" + elementId).css({ left: x, top: y });
            };

            $.connection.hub.start().done(function () {
                $('#createBathButton').click(function () {
                    draw.server.drawElement('bathElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createLavatoryButton').click(function () {
                    draw.server.drawElement('lavatoryElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createShowerButton').click(function () {
                    draw.server.drawElement('showerElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createDoorButton').click(function () {
                    draw.server.drawElement('doorElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createWallButton').click(function () {
                    draw.server.drawElement('wallElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createWindowButton').click(function () {
                    draw.server.drawElement('windowElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createRefrigeratorButton').click(function () {
                    draw.server.drawElement('refrigeratorElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createSinkButton').click(function () {
                    draw.server.drawElement('sinkElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createStoveButton').click(function () {
                    draw.server.drawElement('stoveElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createSofaButton').click(function () {
                    draw.server.drawElement('sofaElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                $('#createTableButton').click(function () {
                    draw.server.drawElement('tableElement', @Model.Drawing.DrawingID);
                });
            });

            $.connection.hub.start().done(function () {
                draw.server.join(@Model.Drawing.DrawingID, '@User.Identity.GetUserId()');
                console.log("Joined group: " + @Model.Drawing.DrawingID);
            });

             $.connection.hub.start().done(function () {
                $('#leaveButton').click(function () {
                    draw.server.leave(@Model.Drawing.DrawingID, '@User.Identity.GetUserId()');
                console.log("Left group: " + @Model.Drawing.DrawingID);

                });
             });

        });
    </script>
</body>
</html>



